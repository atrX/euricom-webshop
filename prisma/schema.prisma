// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    cart          Cart?
}

enum Role {
    USER
    ADMIN
}

model Product {
    id              String      @id @default(cuid()) @map("_id")
    name            String
    description     String
    price           Float
    image           String
    stock           Int         @default(0)
    cartProducts    CartProduct[]
}

model Cart {
    id              String      @id @default(cuid()) @map("_id")
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    cartProducts    CartProduct[]

    @@unique([userId])
}

model CartProduct {
    id              String      @id @default(cuid()) @map("_id")
    productId       String
    cartId          String
    amount          Int         @default(1)
    product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
    cart            Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)

    @@unique([productId, cartId])
}